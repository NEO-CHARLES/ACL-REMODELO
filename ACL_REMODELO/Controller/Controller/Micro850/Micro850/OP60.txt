(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*CONTROLE Sinalizador LED*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: IntDeclaration *)
IntDeclaration_2(TRUE, STEP, , , , , , , , , ) ;
OP60_STEP := IntDeclaration_2.o0 ;
(* FB call: BoolDeclaration *)
BoolDeclaration_1(IntDeclaration_2.Q, LEDRED, LEDYELLOW, LEDGREEN, OP60_PRODUCTIONSUBTRACT, OP60_SETUPSENSORLEFT1TUBE, OP60_SETUPSENSORRIGHT1TUBE, APPROVED, , , ) ;
OP60_LEDRED := BoolDeclaration_1.o0 ;
OP60_LEDYELLOW := BoolDeclaration_1.o1 ;
OP60_LEDGREEN := BoolDeclaration_1.o2 ;
PRODUCTIONSUBTRACT := BoolDeclaration_1.o3 ;
SETUPSENSORLEFT1 := BoolDeclaration_1.o4 ;
SETUPSENSORRIGHT1 := BoolDeclaration_1.o5 ;
OP60_TESTAPPROVED := BoolDeclaration_1.o6 ;
(* FB call: FB_SNL *)
FB_SNL_1(BoolDeclaration_1.Q, STEP) ;
LEDYELLOW := FB_SNL_1.YL ;
LEDGREEN := FB_SNL_1.GR ;
LEDRED := FB_SNL_1.RD ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*VARIÁVEIS DE Produção*)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := TRUE ;
IF __EDTB1 THEN
PRODUCTIONGOAL := ANY_TO_DINT(IHM_PRODGOAL) ;
END_IF ;
__MO_ANY_TO_DINT_1 := __EDTB1 ;
__EDTB2 := __EDTB1 ;
__EDTB3 := TRUE ;
IF __EDTB3 THEN
OP60_PRODCOUNT := ANY_TO_INT(PRODUCTIONCOUNT) ;
END_IF ;
__MO_ANY_TO_INT_1 := __EDTB3 ;
__EDTB4 := __EDTB3 ;
__EDTB5 := (__EDTB2 OR __EDTB4) ;
__EDTB6 := __EDTB5 AND OP60_PRODUCTIONADD ;
__EDTB7 := __EDTB5 AND APPROVED ;
PRODUCTIONADD := (__EDTB6 OR __EDTB7) ;
__EDTB8 := __EDTB5 AND OP60_PRODUCTIONRESET ;
__EDTB9 := __EDTB5 AND PRODUCTIONRESET ;
PD_RESET := (__EDTB8 OR __EDTB9) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*VARIÁVEIS Dispositivo Variáveis Global => Local*)
__STEPPRAGMA
0,18
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := BUTTONSTART ;
__EDTB11 := IHM_ALARMRESET ;
ALARMRESET := (__EDTB10 OR __EDTB11) ;
__EDTB12 := DEVICERESET ;
IF __EDTB12 THEN
(*Reset coil*)
CILINDERADVANCE := FALSE ;
END_IF ;
__EDTB13 := IHM_DEVICERELEASE ;
__EDTB14 := OP60_DEVICERELEASE AND NOT(PRODUCTIONFULL) AND NOT(DATABASERECORD) ;
DEVICERELEASE := (__EDTB13 OR __EDTB14) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTORLE DE Setup*)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB15 := MODELSIDELEFT AND SETUPSENSORLEFT1 ;
__EDTB16 := MODELSIDERIGHT AND SETUPSENSORRIGHT1 ;
DEVICESETUP := (__EDTB15 OR __EDTB16) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE DE Histórico*)
__STEPPRAGMA
0,27
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB17 := TRUE ;
IF __EDTB17 THEN
OP60_DATABASERECORD := (  RECORD) ;
END_IF ;
__MO_1GAIN_1 := __EDTB17 ;
__EDTB18 := __EDTB17 ;
(* FB call: FB_SV *)
FB_SV_1(DATABASERECORD, T#1S) ;
RECORD := FB_SV_1.TG ;
__EDTB19 := FB_SV_1.Q ;
IF __EDTB19 THEN
(*Reset coil*)
DATABASERECORD := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE DE Alertas*)
__STEPPRAGMA
0,32
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB20 := ALERT_00 ;
IF __EDTB20 THEN
ALARMNUMBER := ANY_TO_INT(6000) ;
END_IF ;
__MO_ANY_TO_INT_2 := __EDTB20 ;
__EDTB21 := __EDTB20 ;
IF __EDTB21 THEN
STEP := ANY_TO_INT(501) ;
END_IF ;
__MO_ANY_TO_INT_3 := __EDTB21 ;
__EDTB22 := __EDTB21 ;
IF __EDTB22 THEN
(*Reset coil*)
ALERT_00 := FALSE ;
END_IF ;
__EDTB23 := APPROVED ;
IF __EDTB23 THEN
ALARMNUMBER := ANY_TO_INT(6010) ;
END_IF ;
__MO_ANY_TO_INT_4 := __EDTB23 ;
__EDTB24 := __EDTB23 ;
IF __EDTB24 THEN
STEP := ANY_TO_INT(400) ;
END_IF ;
__MO_ANY_TO_INT_5 := __EDTB24 ;
__EDTB25 := __EDTB24 ;
IF __EDTB25 THEN
(*Reset coil*)
APPROVED := FALSE ;
END_IF ;
__EDTB26 := DISAPPROVED ;
IF __EDTB26 THEN
ALARMNUMBER := ANY_TO_INT(6011) ;
END_IF ;
__MO_ANY_TO_INT_6 := __EDTB26 ;
__EDTB27 := __EDTB26 ;
IF __EDTB27 THEN
STEP := ANY_TO_INT(400) ;
END_IF ;
__MO_ANY_TO_INT_7 := __EDTB27 ;
__EDTB28 := __EDTB27 ;
IF __EDTB28 THEN
(*Reset coil*)
DISAPPROVED := FALSE ;
END_IF ;
__EDTB29 := ALERT_20 ;
IF __EDTB29 THEN
ALARMNUMBER := ANY_TO_INT(6020) ;
END_IF ;
__MO_ANY_TO_INT_8 := __EDTB29 ;
__EDTB30 := __EDTB29 ;
IF __EDTB30 THEN
STEP := ANY_TO_INT(500) ;
END_IF ;
__MO_ANY_TO_INT_9 := __EDTB30 ;
__EDTB31 := __EDTB30 ;
IF __EDTB31 THEN
(*Reset coil*)
ALERT_20 := FALSE ;
END_IF ;
__EDTB32 := MODELHEATINGWITH AND HEATINGTESTDISAPROVED ;
IF __EDTB32 THEN
ALARMNUMBER := (  6050) ;
END_IF ;
__MO_1GAIN_2 := __EDTB32 ;
__EDTB33 := __EDTB32 ;
IF __EDTB33 THEN
(*Reset coil*)
HEATINGTESTDISAPROVED := FALSE ;
END_IF ;
__EDTB34 := MODELHEATINGNOT AND HEATINGTESTAPROVED ;
IF __EDTB34 THEN
ALARMNUMBER := (  6050) ;
END_IF ;
__MO_1GAIN_3 := __EDTB34 ;
__EDTB35 := __EDTB34 ;
IF __EDTB35 THEN
(*Reset coil*)
HEATINGTESTAPROVED := FALSE ;
END_IF ;
; (*Pulse detection on : TDX_RP with __MEMO__1__TDX_RP *)
__EDTB36 := (TDX_RP AND NOT(__MEMO__1__TDX_RP)) ;
; (*Pulse detection on : TDY_RP with __MEMO__2__TDY_RP *)
__EDTB37 := (TDY_RP AND NOT(__MEMO__2__TDY_RP)) ;
__EDTB38 := (__EDTB36 OR __EDTB37) ;
IF __EDTB38 THEN
ALARMNUMBER := (  6030) ;
END_IF ;
__MO_1GAIN_4 := __EDTB38 ;
__EDTB39 := __EDTB38 ;
; (*Pulse detection on : DX_RP with __MEMO__3__DX_RP *)
__EDTB40 := (DX_RP AND NOT(__MEMO__3__DX_RP)) ;
; (*Pulse detection on : DY_RP with __MEMO__4__DY_RP *)
__EDTB41 := (DY_RP AND NOT(__MEMO__4__DY_RP)) ;
__EDTB42 := (__EDTB40 OR __EDTB41) ;
IF __EDTB42 THEN
ALARMNUMBER := (  6040) ;
END_IF ;
__MO_1GAIN_5 := __EDTB42 ;
__EDTB43 := __EDTB42 ;
__EDTB44 := (__EDTB39 OR __EDTB43) ;
IF __EDTB44 THEN
(*Set coil*)
DISAPPROVED := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__MEMO__1__TDX_RP := TDX_RP ; (*Pulse detection on : TDX_RP with __MEMO__1__TDX_RP *)
__MEMO__2__TDY_RP := TDY_RP ; (*Pulse detection on : TDY_RP with __MEMO__2__TDY_RP *)
__MEMO__3__DX_RP := DX_RP ; (*Pulse detection on : DX_RP with __MEMO__3__DX_RP *)
__MEMO__4__DY_RP := DY_RP ; (*Pulse detection on : DY_RP with __MEMO__4__DY_RP *)


(*************** Rung **********************************)
(*CONTROLE DE Produção*)
__STEPPRAGMA
0,49
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: CTUD *)
CTUD_1(PRODUCTIONADD, PRODUCTIONSUBTRACT, PD_RESET, , PRODUCTIONGOAL) ;
PRODUCTIONCOUNT := CTUD_1.CV ;
__EDTB45 := CTUD_1.QU ;
IF __EDTB45 THEN
ALARMNUMBER := (  6100) ;
END_IF ;
__MO_1GAIN_6 := __EDTB45 ;
PRODUCTIONFULL := __EDTB45 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 00 - RESET*)
__STEPPRAGMA
0,55
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB47 := TRUE ;
IF __EDTB47 THEN
(* Operator output on : = with __EDTB46 *)
__EDTB46 := (STEP = 0) ;
ELSE
__EDTB46 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB46 ;
(* FB call: TP *)
TP_1(__EDTB46, T#2S) ;
DEVICERESET := TP_1.Q ;
(* FB call: TON *)
TON_3(__EDTB46, T#1S) ;
__EDTB48 := TON_3.Q AND DEVICERELEASE ;
IF __EDTB48 THEN
STEP := (  1) ;
END_IF ;
__MO_1GAIN_7 := __EDTB48 ;
__EDTB49 := __EDTB48 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 01 - SETUP NOK*)
__STEPPRAGMA
0,60
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB51 := TRUE ;
IF __EDTB51 THEN
(* Operator output on : = with __EDTB50 *)
__EDTB50 := (STEP = 1) ;
ELSE
__EDTB50 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB50 ;
__EDTB52 := __EDTB50 AND DEVICESETUP ;
IF __EDTB52 THEN
STEP := (  10) ;
END_IF ;
__MO_1GAIN_8 := __EDTB52 ;
__EDTB53 := __EDTB52 ;
; (*Fall detection on  : BUTTONSTART with __MEMO__5__BUTTONSTART *)
__EDTB54 := __EDTB50 AND (__MEMO__5__BUTTONSTART AND NOT(BUTTONSTART)) ;
IF __EDTB54 THEN
(*Set coil*)
ALERT_20 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__MEMO__5__BUTTONSTART := BUTTONSTART ; (*Fall detection on  : BUTTONSTART with __MEMO__5__BUTTONSTART *)


(*************** Rung **********************************)
(*PASSO 10 - STUP OK*)
__STEPPRAGMA
0,64
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB56 := TRUE ;
IF __EDTB56 THEN
(* Operator output on : = with __EDTB55 *)
__EDTB55 := (STEP = 10) ;
ELSE
__EDTB55 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB55 ;
; (*Fall detection on  : BUTTONSTART with __MEMO__6__BUTTONSTART *)
__EDTB57 := __EDTB55 AND (__MEMO__6__BUTTONSTART AND NOT(BUTTONSTART)) ;
IF __EDTB57 THEN
STEP := (  20) ;
END_IF ;
__MO_1GAIN_9 := __EDTB57 ;
__EDTB58 := __EDTB57 ;
__EDTB59 := __EDTB55 AND NOT(DEVICESETUP) ;
IF __EDTB59 THEN
STEP := (  1) ;
END_IF ;
__MO_1GAIN_10 := __EDTB59 ;
__EDTB60 := __EDTB59 ;

(*************** Code for the end of Rung **************)
__MEMO__6__BUTTONSTART := BUTTONSTART ; (*Fall detection on  : BUTTONSTART with __MEMO__6__BUTTONSTART *)


(*************** Rung **********************************)
(*PASSO 20 - INICIO*)
__STEPPRAGMA
0,69
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB62 := TRUE ;
IF __EDTB62 THEN
(* Operator output on : = with __EDTB61 *)
__EDTB61 := (STEP = 20) ;
ELSE
__EDTB61 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB61 ;
__EDTB63 := __EDTB61 ;
IF __EDTB63 THEN
(*Reset coil*)
APPROVED := FALSE ;
END_IF ;
__EDTB64 := __EDTB61 ;
IF __EDTB64 THEN
(*Reset coil*)
DISAPPROVED := FALSE ;
END_IF ;
__EDTB65 := __EDTB61 AND NOT(APPROVED) AND NOT(DISAPPROVED) ;
IF __EDTB65 THEN
STEP := (  30) ;
END_IF ;
__MO_1GAIN_11 := __EDTB65 ;
__EDTB66 := __EDTB65 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,74
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: FB_PV *)
FB_PV_7(TRUE, STEP, 299, 20) ;
STP_AP := FB_PV_7.AP ;
(* FB call: TON *)
TON_2(FB_PV_7.Q AND STP_AP AND NOT(HEATINGTESTSTART), T#500MS) ;
__EDTB67 := TON_2.Q ;
IF __EDTB67 THEN
(*Set coil*)
HEATINGTESTSTART := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,79
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB69 := TRUE ;
IF __EDTB69 THEN
(* Operator output on : = with __EDTB68 *)
__EDTB68 := (STEP = 30) ;
ELSE
__EDTB68 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB68 ;
__EDTB70 := __EDTB68 ;
IF __EDTB70 THEN
(*Set coil*)
CILINDERADVANCE := TRUE ;
END_IF ;
(* FB call: FB_PK_V2 *)
FB_PK_V2_1(__EDTB68 AND CILINDERADVANCE, TD1_SN, TD2_SN, T#3S, CILINDERADVANCED) ;
TD1_PK := FB_PK_V2_1.PKP1 ;
TD2_PK := FB_PK_V2_1.PKP2 ;
__EDTB71 := FB_PK_V2_1.Q ;
(* FB call: FB_PV *)
FB_PV_5(__EDTB71, TD1_PK, TD1_MX, TD1_MN) ;
TDX_AP := FB_PV_5.AP ;
TDX_RP := FB_PV_5.RP ;
__EDTB72 := FB_PV_5.Q ;
(* FB call: FB_PV *)
FB_PV_6(__EDTB71, TD2_PK, TD1_MX, TD1_MN) ;
TDY_AP := FB_PV_6.AP ;
TDY_RP := FB_PV_6.RP ;
__EDTB73 := FB_PV_6.Q ;
__EDTB74 := (__EDTB72 OR __EDTB73) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,89
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB76 := TRUE ;
IF __EDTB76 THEN
(* Operator output on : = with __EDTB75 *)
__EDTB75 := (STEP = 30) ;
ELSE
__EDTB75 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB75 ;
__EDTB77 := __EDTB75 AND TDX_AP AND TDY_AP ;
__EDTB78 := __EDTB77 AND MODELMOTIONREMOTE ;
IF __EDTB78 THEN
STEP := (  40) ;
END_IF ;
__MO_1GAIN_12 := __EDTB78 ;
__EDTB79 := __EDTB78 ;
__EDTB80 := __EDTB77 AND MODELMOTIONMANUAL ;
IF __EDTB80 THEN
STEP := (  300) ;
END_IF ;
__MO_1GAIN_13 := __EDTB80 ;
__EDTB81 := __EDTB80 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,94
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB83 := TRUE ;
IF __EDTB83 THEN
(* Operator output on : = with __EDTB82 *)
__EDTB82 := (STEP = 40) ;
ELSE
__EDTB82 := FALSE ;
END_IF ;
__MO_EQUAL_7 := __EDTB82 ;
(* FB call: MoveTest *)
MoveTest_2(__EDTB82, TD1_SN, T#3S) ;
MOTOR1UP := MoveTest_2.MoveP ;
MOTOR1DOWN := MoveTest_2.MoveN ;
DX := MoveTest_2.PosVariation ;
(* FB call: FB_PV *)
FB_PV_8(MoveTest_2.Q, DX, DX_MX, DX_MN) ;
DX_AP := FB_PV_8.AP ;
DX_RP := FB_PV_8.RP ;
__EDTB84 := FB_PV_8.Q ;
__EDTB85 := __EDTB82 AND DX_AP ;
IF __EDTB85 THEN
STEP := (  50) ;
END_IF ;
__MO_1GAIN_14 := __EDTB85 ;
__EDTB86 := __EDTB85 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,101
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB88 := TRUE ;
IF __EDTB88 THEN
(* Operator output on : = with __EDTB87 *)
__EDTB87 := (STEP = 50) ;
ELSE
__EDTB87 := FALSE ;
END_IF ;
__MO_EQUAL_8 := __EDTB87 ;
(* FB call: MoveTest *)
MoveTest_3(__EDTB87, TD2_SN, T#3S) ;
MOTOR1RIGTH := MoveTest_3.MoveP ;
MOTOR1LEFT := MoveTest_3.MoveN ;
DY := MoveTest_3.PosVariation ;
(* FB call: FB_PV *)
FB_PV_9(MoveTest_3.Q, DY, DY_MX, DY_MN) ;
DY_AP := FB_PV_9.AP ;
DY_RP := FB_PV_9.RP ;
__EDTB89 := FB_PV_9.Q ;
__EDTB90 := __EDTB87 AND DY_AP ;
IF __EDTB90 THEN
STEP := (  300) ;
END_IF ;
__MO_1GAIN_15 := __EDTB90 ;
__EDTB91 := __EDTB90 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,108
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB93 := TRUE ;
IF __EDTB93 THEN
(* Operator output on : = with __EDTB92 *)
__EDTB92 := (STEP = 300) ;
ELSE
__EDTB92 := FALSE ;
END_IF ;
__MO_EQUAL_9 := __EDTB92 ;
__EDTB94 := __EDTB92 AND NOT(DISAPPROVED) ;
IF __EDTB94 THEN
(*Set coil*)
APPROVED := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 300 - TESTE*)
__STEPPRAGMA
0,112
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB96 := TRUE ;
IF __EDTB96 THEN
(* Operator output on : = with __EDTB95 *)
__EDTB95 := (STEP = 300) ;
ELSE
__EDTB95 := FALSE ;
END_IF ;
__MO_EQUAL_10 := __EDTB95 ;
(* FB call: TON *)
TON_1(__EDTB95, T#3S) ;
__EDTB97 := TON_1.Q ;
IF __EDTB97 THEN
(*Set coil*)
DISAPPROVED := TRUE ;
END_IF ;
__EDTB98 := __EDTB95 AND APPROVED ;
IF __EDTB98 THEN
ALARMNUMBER := (  5010) ;
END_IF ;
__MO_1GAIN_16 := __EDTB98 ;
__EDTB99 := __EDTB98 ;
__EDTB100 := __EDTB95 AND DISAPPROVED ;
IF __EDTB100 THEN
ALARMNUMBER := (  5011) ;
END_IF ;
__MO_1GAIN_17 := __EDTB100 ;
__EDTB101 := __EDTB100 ;
__EDTB102 := (__EDTB99 OR __EDTB101) ;
IF __EDTB102 THEN
STEP := (  400) ;
END_IF ;
__MO_1GAIN_18 := __EDTB102 ;
__EDTB103 := __EDTB102 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 400 - SALVA HISTÓRICO*)
__STEPPRAGMA
0,119
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB105 := TRUE ;
IF __EDTB105 THEN
(* Operator output on : = with __EDTB104 *)
__EDTB104 := (STEP = 400) ;
ELSE
__EDTB104 := FALSE ;
END_IF ;
__MO_EQUAL_11 := __EDTB104 ;
__EDTB106 := __EDTB104 ;
IF __EDTB106 THEN
(*Set coil*)
DATABASERECORD := TRUE ;
END_IF ;
__EDTB107 := __EDTB104 AND DATABASERECORD ;
__EDTB108 := __EDTB107 AND APPROVED ;
IF __EDTB108 THEN
STEP := (  0) ;
END_IF ;
__MO_1GAIN_19 := __EDTB108 ;
__EDTB109 := __EDTB108 ;
__EDTB110 := __EDTB107 AND DISAPPROVED ;
IF __EDTB110 THEN
STEP := (  500) ;
END_IF ;
__MO_1GAIN_20 := __EDTB110 ;
__EDTB111 := __EDTB110 ;
__EDTB112 := (__EDTB109 OR __EDTB111) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 500 - RESET DE FALHAS*)
__STEPPRAGMA
0,125
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB114 := TRUE ;
IF __EDTB114 THEN
(* Operator output on : = with __EDTB113 *)
__EDTB113 := (STEP = 500) ;
ELSE
__EDTB113 := FALSE ;
END_IF ;
__MO_EQUAL_12 := __EDTB113 ;
; (*Fall detection on  : ALARMRESET with __MEMO__7__ALARMRESET *)
__EDTB115 := __EDTB113 AND (__MEMO__7__ALARMRESET AND NOT(ALARMRESET)) ;
__EDTB116 := __EDTB115 ;
IF __EDTB116 THEN
ALARMNUMBER := (  0) ;
END_IF ;
__MO_1GAIN_21 := __EDTB116 ;
__EDTB117 := __EDTB116 ;
IF __EDTB117 THEN
(*Set coil*)
SECURITYVALVE := TRUE ;
END_IF ;
__EDTB118 := __EDTB115 AND SECURITYVALVE ;
IF __EDTB118 THEN
STEP := (  0) ;
END_IF ;
__MO_1GAIN_22 := __EDTB118 ;
__EDTB119 := __EDTB118 ;

(*************** Code for the end of Rung **************)
__MEMO__7__ALARMRESET := ALARMRESET ; (*Fall detection on  : ALARMRESET with __MEMO__7__ALARMRESET *)


(*************** Rung **********************************)
(*PASSO 501 - SEGURANÇA*)
__STEPPRAGMA
0,130
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB121 := TRUE ;
IF __EDTB121 THEN
(* Operator output on : = with __EDTB120 *)
__EDTB120 := (STEP = 501) ;
ELSE
__EDTB120 := FALSE ;
END_IF ;
__MO_EQUAL_13 := __EDTB120 ;
__EDTB122 := __EDTB120 ;
IF __EDTB122 THEN
(*Reset coil*)
SECURITYVALVE := FALSE ;
END_IF ;
__EDTB123 := __EDTB120 AND NOT(SECURITYVALVE) AND BUTTONSTOP ;
IF __EDTB123 THEN
STEP := (  500) ;
END_IF ;
__MO_1GAIN_23 := __EDTB123 ;
__EDTB124 := __EDTB123 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __MEMO__1__TDX_RP *)
(* __EDTB36 *)
(* __MEMO__2__TDY_RP *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __MEMO__3__DX_RP *)
(* __EDTB40 *)
(* __MEMO__4__DY_RP *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __EDTB52 *)
(* __EDTB53 *)
(* __MEMO__5__BUTTONSTART *)
(* __EDTB54 *)
(* __EDTB55 *)
(* __EDTB56 *)
(* __MEMO__6__BUTTONSTART *)
(* __EDTB57 *)
(* __EDTB58 *)
(* __EDTB59 *)
(* __EDTB60 *)
(* __EDTB61 *)
(* __EDTB62 *)
(* __EDTB63 *)
(* __EDTB64 *)
(* __EDTB65 *)
(* __EDTB66 *)
(* __EDTB67 *)
(* __EDTB68 *)
(* __EDTB69 *)
(* __EDTB70 *)
(* __EDTB71 *)
(* __EDTB72 *)
(* __EDTB73 *)
(* __EDTB74 *)
(* __EDTB75 *)
(* __EDTB76 *)
(* __EDTB77 *)
(* __EDTB78 *)
(* __EDTB79 *)
(* __EDTB80 *)
(* __EDTB81 *)
(* __EDTB82 *)
(* __EDTB83 *)
(* __EDTB84 *)
(* __EDTB85 *)
(* __EDTB86 *)
(* __EDTB87 *)
(* __EDTB88 *)
(* __EDTB89 *)
(* __EDTB90 *)
(* __EDTB91 *)
(* __EDTB92 *)
(* __EDTB93 *)
(* __EDTB94 *)
(* __EDTB95 *)
(* __EDTB96 *)
(* __EDTB97 *)
(* __EDTB98 *)
(* __EDTB99 *)
(* __EDTB100 *)
(* __EDTB101 *)
(* __EDTB102 *)
(* __EDTB103 *)
(* __EDTB104 *)
(* __EDTB105 *)
(* __EDTB106 *)
(* __EDTB107 *)
(* __EDTB108 *)
(* __EDTB109 *)
(* __EDTB110 *)
(* __EDTB111 *)
(* __EDTB112 *)
(* __EDTB113 *)
(* __EDTB114 *)
(* __MEMO__7__ALARMRESET *)
(* __EDTB115 *)
(* __EDTB116 *)
(* __EDTB117 *)
(* __EDTB118 *)
(* __EDTB119 *)
(* __EDTB120 *)
(* __EDTB121 *)
(* __EDTB122 *)
(* __EDTB123 *)
(* __EDTB124 *)

