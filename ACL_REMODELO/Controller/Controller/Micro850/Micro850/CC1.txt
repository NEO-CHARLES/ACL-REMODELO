(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*ENTRADAS*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: BoolDeclaration *)
VarDeclarationBOOL_1(TRUE, LOADCELL1TESTFINISHED, OP40_BUTTONRIGHT, , , , , , , , ) ;
END := VarDeclarationBOOL_1.o0 ;
FORCED := VarDeclarationBOOL_1.o1 ;
(* FB call: IntDeclaration *)
VarDeclarationINT_1(VarDeclarationBOOL_1.Q, IHM_LOADCELL1MIN, IHM_LOADCELL1MAX, SENSORPEAK, ANALOGICINPUT, SENSOR, ANALOGICINPUTPEAK, , , , ) ;
SENSORPEAKMIN := VarDeclarationINT_1.o0 ;
SENSORPEAKMAX := VarDeclarationINT_1.o1 ;
IHM_LOADCELL1SENSORPEAK := VarDeclarationINT_1.o2 ;
IHM_LOADCELL1ANALOGICINPUT := VarDeclarationINT_1.o3 ;
IHM_LOADCELL1SENSOR := VarDeclarationINT_1.o4 ;
IHM_LOADCELL1ANALOGICINPUTPEAK := VarDeclarationINT_1.o5 ;
(* FB call: RealDeclaration *)
RealDeclaration_1(VarDeclarationINT_1.Q, 870.0, 4854.0, 19.62, 215.82, , , , , , ) ;
INPUTMIN := RealDeclaration_1.o0 ;
INPUTMAX := RealDeclaration_1.o1 ;
OUTPUTMIN := RealDeclaration_1.o2 ;
OUTPUTMAX := RealDeclaration_1.o3 ;
__EDTB1 := RealDeclaration_1.Q ;
(* FB call: TON *)
TON_3(__EDTB1 AND FORCED, T#3S) ;
__EDTB2 := TON_3.Q ;
__EDTB3 := __EDTB1 AND LOADCELL1TESTRUN ;
__EDTB4 := __EDTB1 AND IHM_LOADCELL1TESTRUN ;
__EDTB5 := (__EDTB3 OR __EDTB4) ;
__EDTB6 := (__EDTB2 OR __EDTB5) ;
IF __EDTB6 THEN
(*Set coil*)
RUN := TRUE ;
END_IF ;
__EDTB7 := __EDTB1 AND ACTUATOR ;
IF __EDTB7 THEN
(*Set coil*)
OP40_LOADCELL1ACTUATOR := TRUE ;
END_IF ;
; (*Pulse detection on : SUCCESS with __MEMO__1__SUCCESS *)
__EDTB8 := __EDTB1 AND (SUCCESS AND NOT(__MEMO__1__SUCCESS)) ;
IF __EDTB8 THEN
(*Set coil*)
LOADCELL1TESTSUCCESS := TRUE ;
END_IF ;
; (*Pulse detection on : FAIL with __MEMO__2__FAIL *)
__EDTB9 := __EDTB1 AND (FAIL AND NOT(__MEMO__2__FAIL)) ;
IF __EDTB9 THEN
(*Set coil*)
LOADCELL1TESTFAIL := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__MEMO__1__SUCCESS := SUCCESS ; (*Pulse detection on : SUCCESS with __MEMO__1__SUCCESS *)
__MEMO__2__FAIL := FAIL ; (*Pulse detection on : FAIL with __MEMO__2__FAIL *)


(*************** Rung **********************************)
(*ESCALA*)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := TRUE ;
IF __EDTB10 THEN
IMPUT := ANY_TO_REAL(ANALOGICINPUT) ;
END_IF ;
__MO_ANY_TO_REAL_1 := __EDTB10 ;
__EDTB11 := __EDTB10 ;
__EDTB12 := TRUE ;
IF __EDTB12 THEN
ANALOGICINPUT := ANY_TO_INT(_IO_P1_AI_03) ;
END_IF ;
__MO_ANY_TO_INT_1 := __EDTB12 ;
__EDTB13 := __EDTB12 ;
__EDTB14 := (__EDTB11 OR __EDTB13) ;
IF __EDTB14 THEN
(* FB call: SCALER *)
SCALER_1(IMPUT, 870.0, 4854.0, 19.62, 215.82) ;
OUTPUT := SCALER_1.Output ;
END_IF ;
__MO_SCALER_1 := __EDTB14 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CORREÇÃO*)
__STEPPRAGMA
0,20
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB15 := TRUE ;
IF __EDTB15 THEN
SCL_SN1 := (OUTPUT * GAIN) ;
END_IF ;
__MO_MULT_1 := __EDTB15 ;
__EDTB16 := __EDTB15 ;
IF __EDTB16 THEN
SCL_SN2 := (SCL_SN1 + OFFSET) ;
END_IF ;
__MO_PLUS_1 := __EDTB16 ;
__EDTB17 := __EDTB16 ;
IF __EDTB17 THEN
SENSOR := ANY_TO_INT(SCL_SN2) ;
END_IF ;
__MO_ANY_TO_INT_2 := __EDTB17 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*SETUP*)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB18 := MODELSIDELEFT ;
__EDTB19 := __EDTB18 ;
IF __EDTB19 THEN
OFFSET := ANY_TO_REAL(OFFSETLEFT) ;
END_IF ;
__MO_ANY_TO_REAL_2 := __EDTB19 ;
__EDTB20 := __EDTB19 ;
__EDTB21 := __EDTB18 ;
IF __EDTB21 THEN
GAIN := ANY_TO_REAL(GAINLEFT) ;
END_IF ;
__MO_ANY_TO_REAL_3 := __EDTB21 ;
__EDTB22 := __EDTB21 ;
__EDTB23 := (__EDTB20 OR __EDTB22) AND CALIBRATE ;
__EDTB24 := __EDTB23 ;
IF __EDTB24 THEN
OFFSETLEFT := ANY_TO_REAL(IHM_LOADCELL1OFFSET) ;
END_IF ;
__MO_ANY_TO_REAL_4 := __EDTB24 ;
__EDTB25 := __EDTB24 ;
__EDTB26 := __EDTB23 ;
IF __EDTB26 THEN
GAINLEFT := ANY_TO_REAL(IHM_LOADCELL1GAIN) ;
END_IF ;
__MO_ANY_TO_REAL_5 := __EDTB26 ;
__EDTB27 := __EDTB26 ;
__EDTB28 := (__EDTB25 OR __EDTB27) ;
__EDTB29 := MODELSIDERIGHT ;
__EDTB30 := __EDTB29 ;
IF __EDTB30 THEN
OFFSET := ANY_TO_REAL(OFFSETRIGHT) ;
END_IF ;
__MO_ANY_TO_REAL_6 := __EDTB30 ;
__EDTB31 := __EDTB30 ;
__EDTB32 := __EDTB29 ;
IF __EDTB32 THEN
GAIN := ANY_TO_REAL(GAINRIGHT) ;
END_IF ;
__MO_ANY_TO_REAL_7 := __EDTB32 ;
__EDTB33 := __EDTB32 ;
__EDTB34 := (__EDTB31 OR __EDTB33) AND CALIBRATE ;
__EDTB35 := __EDTB34 ;
IF __EDTB35 THEN
OFFSETRIGHT := ANY_TO_REAL(IHM_LOADCELL1OFFSET) ;
END_IF ;
__MO_ANY_TO_REAL_8 := __EDTB35 ;
__EDTB36 := __EDTB35 ;
__EDTB37 := __EDTB34 ;
IF __EDTB37 THEN
GAINRIGHT := ANY_TO_REAL(IHM_LOADCELL1GAIN) ;
END_IF ;
__MO_ANY_TO_REAL_9 := __EDTB37 ;
__EDTB38 := __EDTB37 ;
__EDTB39 := (__EDTB36 OR __EDTB38) ;
(* FB call: TON *)
TON_1((__EDTB28 OR __EDTB39), T#1S) ;
__EDTB40 := TON_1.Q ;
IF __EDTB40 THEN
(*Reset coil*)
CALIBRATE := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*TEMPO DFE AVANÇO DO CILINDRO*)
__STEPPRAGMA
0,33
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: ValuePeak *)
ValuePeak_2(RUN, SENSOR, ANALOGICINPUT, T#3S, END) ;
ACTUATOR := ValuePeak_2.Actuator ;
SENSORPEAK := ValuePeak_2.PeakSensor1 ;
ANALOGICINPUTPEAK := ValuePeak_2.PeakSensor2 ;
(* FB call: ValueProof *)
ValueProof_1(ValuePeak_2.Q, SENSORPEAK, SENSORPEAKMAX, SENSORPEAKMIN) ;
SUCCESS := ValueProof_1.Success ;
FAIL := ValueProof_1.Fail ;
__EDTB41 := ValueProof_1.Q ;
IF __EDTB41 THEN
(*Reset coil*)
RUN := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __MEMO__1__SUCCESS *)
(* __EDTB8 *)
(* __MEMO__2__FAIL *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)

