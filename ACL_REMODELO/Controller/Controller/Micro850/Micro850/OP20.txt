(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*VARIÁVEIS Dispositivo Variáveis Local => Global*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := TRUE ;
IF __EDTB1 THEN
OP20_STP := (  STP) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
OP20_SV := (  SALVAR) ;
END_IF ;
__MO_1GAIN_2 := __EDTB2 ;
OP20_LD_RED := __EDTB2 AND VM ;
OP20_LD_YELLOW := __EDTB2 AND AM ;
OP20_LD_VD := __EDTB2 AND VD ;
OP20_CILINDERADVANCE := __EDTB2 AND CL_AT ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*VARIÁVEIS Dispositivo Variáveis Global => Local*)
__STEPPRAGMA
0,6
__ENDSTEPPRAGMA
(*Label :*)(**)
BME := OP20_BUTTONLEFT ;
BMD := OP20_BUTTONRIGHT ;
BTS := OP20_BUTTONSTOP ;
__EDTB3 := OP20_BUTTONRIGHT ;
__EDTB4 := IHM_ALARMRESET ;
AL_RS := (__EDTB3 OR __EDTB4) ;
SU_LE1 := NOT(OP20_SENSORSETUPLEFT2TUBE) ;
SU_LD1 := OP20_SENSORSETUPLEFT2TUBE ;
SU_LE2 := NOT(OP20_SENSORSETUPLEFT1HOLDER) ;
SU_LD2 := OP20_SENSORSETUPLEFT1HOLDER ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*VARIÁVEIS Parafusadeira*)
__STEPPRAGMA
0,16
__ENDSTEPPRAGMA
(*Label :*)(**)
PF_RT := OP20_SKREWDRIVEROK ;
OP20_PF_RELEASE := PF_LB ;
OP20_PF_RESET := PF_RS ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE DE Segurança*)
__STEPPRAGMA
0,20
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB5 := NOT(BTS) ;
IF __EDTB5 THEN
(*Set coil*)
AL00 := TRUE ;
END_IF ;
(* FB call: FB_BM *)
FB_BM_1(BME, BMD) ;
BM_OK := FB_BM_1.Q ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE DE Sinalizador LED*)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: LedSinalization *)
LedSinalization_1(TRUE, STP) ;
AM := LedSinalization_1.LedYellow ;
VD := LedSinalization_1.LedGreen ;
VM := LedSinalization_1.LedRed ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTORLE DE Setup*)
__STEPPRAGMA
0,28
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB6 := MODELSIDELEFT AND SU_LE1 AND SU_LE2 ;
__EDTB7 := MODELSIDERIGHT AND SU_LD1 AND SU_LD2 ;
SU := (__EDTB6 OR __EDTB7) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE DE Histórico*)
__STEPPRAGMA
0,31
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: FB_SV *)
FB_SV_1(SV, T#1S) ;
SALVAR := FB_SV_1.TG ;
__EDTB8 := FB_SV_1.Q ;
IF __EDTB8 THEN
(*Reset coil*)
SV := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE DE Alertas*)
__STEPPRAGMA
0,34
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB9 := AL00 ;
IF __EDTB9 THEN
ALARMNUMBER := ANY_TO_INT(2000) ;
END_IF ;
__MO_ANY_TO_INT_1 := __EDTB9 ;
__EDTB10 := __EDTB9 ;
IF __EDTB10 THEN
STP := ANY_TO_INT(501) ;
END_IF ;
__MO_ANY_TO_INT_2 := __EDTB10 ;
__EDTB11 := __EDTB10 ;
IF __EDTB11 THEN
(*Reset coil*)
AL00 := FALSE ;
END_IF ;
__EDTB12 := AL20 ;
IF __EDTB12 THEN
ALARMNUMBER := ANY_TO_INT(2020) ;
END_IF ;
__MO_ANY_TO_INT_3 := __EDTB12 ;
__EDTB13 := __EDTB12 ;
IF __EDTB13 THEN
STP := ANY_TO_INT(500) ;
END_IF ;
__MO_ANY_TO_INT_4 := __EDTB13 ;
__EDTB14 := __EDTB13 ;
IF __EDTB14 THEN
(*Reset coil*)
AL20 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 00 - RESET*)
__STEPPRAGMA
0,39
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB16 := TRUE ;
IF __EDTB16 THEN
(* Operator output on : = with __EDTB15 *)
__EDTB15 := (STP = 0) ;
ELSE
__EDTB15 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB15 ;
PF_RS := __EDTB15 ;
(* FB call: TON *)
TON_3(__EDTB15, T#1500MS) ;
__EDTB17 := TON_3.Q ;
IF __EDTB17 THEN
STP := (  1) ;
END_IF ;
__MO_1GAIN_3 := __EDTB17 ;
__EDTB18 := __EDTB17 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 01 - SETUP NOK*)
__STEPPRAGMA
0,43
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB20 := TRUE ;
IF __EDTB20 THEN
(* Operator output on : = with __EDTB19 *)
__EDTB19 := (STP = 1) ;
ELSE
__EDTB19 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB19 ;
__EDTB21 := __EDTB19 AND SU ;
IF __EDTB21 THEN
STP := (  10) ;
END_IF ;
__MO_1GAIN_4 := __EDTB21 ;
__EDTB22 := __EDTB21 ;
; (*Fall detection on  : BM_OK with __MEMO__1__BM_OK *)
__EDTB23 := __EDTB19 AND (__MEMO__1__BM_OK AND NOT(BM_OK)) ;
IF __EDTB23 THEN
(*Set coil*)
AL20 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__MEMO__1__BM_OK := BM_OK ; (*Fall detection on  : BM_OK with __MEMO__1__BM_OK *)


(*************** Rung **********************************)
(*PASSO 10 - STUP OK*)
__STEPPRAGMA
0,47
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB25 := TRUE ;
IF __EDTB25 THEN
(* Operator output on : = with __EDTB24 *)
__EDTB24 := (STP = 10) ;
ELSE
__EDTB24 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB24 ;
; (*Fall detection on  : BM_OK with __MEMO__2__BM_OK *)
__EDTB26 := __EDTB24 AND (__MEMO__2__BM_OK AND NOT(BM_OK)) ;
IF __EDTB26 THEN
STP := (  20) ;
END_IF ;
__MO_1GAIN_5 := __EDTB26 ;
__EDTB27 := __EDTB26 ;
__EDTB28 := __EDTB24 AND NOT(SU) ;
IF __EDTB28 THEN
STP := (  1) ;
END_IF ;
__MO_1GAIN_6 := __EDTB28 ;
__EDTB29 := __EDTB28 ;

(*************** Code for the end of Rung **************)
__MEMO__2__BM_OK := BM_OK ; (*Fall detection on  : BM_OK with __MEMO__2__BM_OK *)


(*************** Rung **********************************)
(*PASSO 20 - INICIO*)
__STEPPRAGMA
0,52
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB31 := TRUE ;
IF __EDTB31 THEN
(* Operator output on : = with __EDTB30 *)
__EDTB30 := (STP = 20) ;
ELSE
__EDTB30 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB30 ;
__EDTB32 := __EDTB30 ;
IF __EDTB32 THEN
(*Reset coil*)
AP := FALSE ;
END_IF ;
__EDTB33 := __EDTB30 ;
IF __EDTB33 THEN
(*Reset coil*)
RP := FALSE ;
END_IF ;
__EDTB34 := __EDTB30 AND NOT(AP) AND NOT(RP) ;
IF __EDTB34 THEN
STP := (  300) ;
END_IF ;
__MO_1GAIN_7 := __EDTB34 ;
__EDTB35 := __EDTB34 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 300 - Teste*)
__STEPPRAGMA
0,57
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB37 := TRUE ;
IF __EDTB37 THEN
(* Operator output on : = with __EDTB36 *)
__EDTB36 := (STP = 300) ;
ELSE
__EDTB36 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB36 ;
CL_AT := __EDTB36 ;
PF_LB := __EDTB36 ;
; (*Pulse detection on : PF_RT with __MEMO__3__PF_RT *)
__EDTB38 := __EDTB36 AND (PF_RT AND NOT(__MEMO__3__PF_RT)) ;
IF __EDTB38 THEN
(*Set coil*)
AP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__MEMO__3__PF_RT := PF_RT ; (*Pulse detection on : PF_RT with __MEMO__3__PF_RT *)


(*************** Rung **********************************)
(*PASSO 300 - Avaliação*)
__STEPPRAGMA
0,61
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB40 := TRUE ;
IF __EDTB40 THEN
(* Operator output on : = with __EDTB39 *)
__EDTB39 := (STP = 300) ;
ELSE
__EDTB39 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB39 ;
(* FB call: TON *)
TON_4(__EDTB39, T#5S) ;
__EDTB41 := TON_4.Q ;
IF __EDTB41 THEN
(*Set coil*)
RP := TRUE ;
END_IF ;
__EDTB42 := __EDTB39 AND AP ;
IF __EDTB42 THEN
ALARMNUMBER := (  2010) ;
END_IF ;
__MO_1GAIN_8 := __EDTB42 ;
__EDTB43 := __EDTB42 ;
__EDTB44 := __EDTB39 AND RP ;
IF __EDTB44 THEN
ALARMNUMBER := (  2011) ;
END_IF ;
__MO_1GAIN_9 := __EDTB44 ;
__EDTB45 := __EDTB44 ;
__EDTB46 := (__EDTB43 OR __EDTB45) ;
IF __EDTB46 THEN
STP := (  400) ;
END_IF ;
__MO_1GAIN_10 := __EDTB46 ;
__EDTB47 := __EDTB46 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 400 - Histórico*)
__STEPPRAGMA
0,68
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB49 := TRUE ;
IF __EDTB49 THEN
(* Operator output on : = with __EDTB48 *)
__EDTB48 := (STP = 400) ;
ELSE
__EDTB48 := FALSE ;
END_IF ;
__MO_EQUAL_7 := __EDTB48 ;
__EDTB50 := __EDTB48 ;
IF __EDTB50 THEN
(*Set coil*)
SV := TRUE ;
END_IF ;
__EDTB51 := __EDTB48 AND SV ;
__EDTB52 := __EDTB51 AND AP ;
IF __EDTB52 THEN
STP := (  0) ;
END_IF ;
__MO_1GAIN_11 := __EDTB52 ;
__EDTB53 := __EDTB52 ;
__EDTB54 := __EDTB51 AND RP ;
IF __EDTB54 THEN
STP := (  500) ;
END_IF ;
__MO_1GAIN_12 := __EDTB54 ;
__EDTB55 := __EDTB54 ;
__EDTB56 := (__EDTB53 OR __EDTB55) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 500 - RESET DE FALHAS*)
__STEPPRAGMA
0,74
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB58 := TRUE ;
IF __EDTB58 THEN
(* Operator output on : = with __EDTB57 *)
__EDTB57 := (STP = 500) ;
ELSE
__EDTB57 := FALSE ;
END_IF ;
__MO_EQUAL_8 := __EDTB57 ;
; (*Fall detection on  : AL_RS with __MEMO__4__AL_RS *)
__EDTB59 := __EDTB57 AND (__MEMO__4__AL_RS AND NOT(AL_RS)) ;
IF __EDTB59 THEN
ALARMNUMBER := (  0) ;
END_IF ;
__MO_1GAIN_13 := __EDTB59 ;
__EDTB60 := __EDTB59 ;
IF __EDTB60 THEN
(*Set coil*)
VVS := TRUE ;
END_IF ;
__EDTB61 := __EDTB59 AND VVS ;
IF __EDTB61 THEN
STP := (  0) ;
END_IF ;
__MO_1GAIN_14 := __EDTB61 ;
__EDTB62 := __EDTB61 ;

(*************** Code for the end of Rung **************)
__MEMO__4__AL_RS := AL_RS ; (*Fall detection on  : AL_RS with __MEMO__4__AL_RS *)


(*************** Rung **********************************)
(*PASSO 501 - SEGURANÇA*)
__STEPPRAGMA
0,78
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB64 := TRUE ;
IF __EDTB64 THEN
(* Operator output on : = with __EDTB63 *)
__EDTB63 := (STP = 501) ;
ELSE
__EDTB63 := FALSE ;
END_IF ;
__MO_EQUAL_9 := __EDTB63 ;
__EDTB65 := __EDTB63 ;
IF __EDTB65 THEN
(*Reset coil*)
VVS := FALSE ;
END_IF ;
__EDTB66 := __EDTB63 AND NOT(VVS) AND BTS ;
IF __EDTB66 THEN
STP := (  500) ;
END_IF ;
__MO_1GAIN_15 := __EDTB66 ;
__EDTB67 := __EDTB66 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __MEMO__1__BM_OK *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __MEMO__2__BM_OK *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __MEMO__3__PF_RT *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __EDTB52 *)
(* __EDTB53 *)
(* __EDTB54 *)
(* __EDTB55 *)
(* __EDTB56 *)
(* __EDTB57 *)
(* __EDTB58 *)
(* __MEMO__4__AL_RS *)
(* __EDTB59 *)
(* __EDTB60 *)
(* __EDTB61 *)
(* __EDTB62 *)
(* __EDTB63 *)
(* __EDTB64 *)
(* __EDTB65 *)
(* __EDTB66 *)
(* __EDTB67 *)

