(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*REGUA A*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := TRUE ;
IF __EDTB1 THEN
RREGUAA := ANY_TO_REAL(_IO_P1_AI_00) ;
END_IF ;
__MO_ANY_TO_REAL_1 := __EDTB1 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*REGUA A*)
__STEPPRAGMA
0,4
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB2 := __SYSVA_POWERUP_BIT ;
__EDTB3 := __EDTB2 ;
IF __EDTB3 THEN
RMINIMO_AI0 := (  0.0) ;
END_IF ;
__MO_1GAIN_1 := __EDTB3 ;
__EDTB4 := __EDTB3 ;
__EDTB5 := __EDTB2 ;
IF __EDTB5 THEN
RMAXIMO_AI0 := (  10500.0) ;
END_IF ;
__MO_1GAIN_2 := __EDTB5 ;
__EDTB6 := __EDTB5 ;
__EDTB7 := __EDTB2 ;
IF __EDTB7 THEN
MIN_REGUAA := (  0.0) ;
END_IF ;
__MO_1GAIN_3 := __EDTB7 ;
__EDTB8 := __EDTB7 ;
__EDTB9 := __EDTB2 ;
IF __EDTB9 THEN
MAX_REGUAA := (  150.0) ;
END_IF ;
__MO_1GAIN_4 := __EDTB9 ;
__EDTB10 := __EDTB9 ;
__EDTB11 := (__EDTB8 OR __EDTB10) ;
__EDTB12 := (__EDTB6 OR __EDTB11) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*Linearização Canal REGUA A*)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB13 := TRUE ;
IF __EDTB13 THEN
(* FB call: SCALER *)
SCALER_1(RREGUAA, RMINIMO_AI0, RMAXIMO_AI0, MIN_REGUAA, MAX_REGUAA) ;
RCONV_REGUAA := SCALER_1.Output ;
END_IF ;
__MO_SCALER_1 := __EDTB13 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*REGUA B*)
__STEPPRAGMA
0,20
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB14 := TRUE ;
IF __EDTB14 THEN
RREGUAB := ANY_TO_REAL(_IO_P1_AI_01) ;
END_IF ;
__MO_ANY_TO_REAL_2 := __EDTB14 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*REGUA B*)
__STEPPRAGMA
0,23
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB15 := __SYSVA_POWERUP_BIT ;
__EDTB16 := __EDTB15 ;
IF __EDTB16 THEN
RMINIMO_AI1 := (  0.0) ;
END_IF ;
__MO_1GAIN_5 := __EDTB16 ;
__EDTB17 := __EDTB16 ;
__EDTB18 := __EDTB15 ;
IF __EDTB18 THEN
RMAXIMO_AI1 := (  9851.0) ;
END_IF ;
__MO_1GAIN_6 := __EDTB18 ;
__EDTB19 := __EDTB18 ;
__EDTB20 := __EDTB15 ;
IF __EDTB20 THEN
MIN_REGUAB := (  0.0) ;
END_IF ;
__MO_1GAIN_7 := __EDTB20 ;
__EDTB21 := __EDTB20 ;
__EDTB22 := __EDTB15 ;
IF __EDTB22 THEN
MAX_REGUAB := (  150.0) ;
END_IF ;
__MO_1GAIN_8 := __EDTB22 ;
__EDTB23 := __EDTB22 ;
__EDTB24 := (__EDTB21 OR __EDTB23) ;
__EDTB25 := (__EDTB19 OR __EDTB24) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*Linearização REGUA B*)
__STEPPRAGMA
0,32
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB26 := TRUE ;
IF __EDTB26 THEN
(* FB call: SCALER *)
SCALER_2(RREGUAB, RMINIMO_AI1, RMAXIMO_AI1, MIN_REGUAB, MAX_REGUAB) ;
RCONV_REGUAB := SCALER_2.Output ;
END_IF ;
__MO_SCALER_2 := __EDTB26 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*SENSOR DE CORRENTE*)
__STEPPRAGMA
0,39
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB27 := TRUE ;
IF __EDTB27 THEN
RSENSORCORRENTE := ANY_TO_REAL(_IO_P1_AI_02) ;
END_IF ;
__MO_ANY_TO_REAL_3 := __EDTB27 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*SENSOR DE CORRENTE*)
__STEPPRAGMA
0,42
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB28 := __SYSVA_POWERUP_BIT ;
__EDTB29 := __EDTB28 ;
IF __EDTB29 THEN
RMINIMO_AI2 := (  16500.0) ;
END_IF ;
__MO_1GAIN_9 := __EDTB29 ;
__EDTB30 := __EDTB29 ;
__EDTB31 := __EDTB28 ;
IF __EDTB31 THEN
RMAXIMO_AI2 := (  18000.0) ;
END_IF ;
__MO_1GAIN_10 := __EDTB31 ;
__EDTB32 := __EDTB31 ;
__EDTB33 := __EDTB28 ;
IF __EDTB33 THEN
MIN_SENSORCORRENTE := (  0.0) ;
END_IF ;
__MO_1GAIN_11 := __EDTB33 ;
__EDTB34 := __EDTB33 ;
__EDTB35 := __EDTB28 ;
IF __EDTB35 THEN
MAX_SENSORCORRENTE := (  1.5) ;
END_IF ;
__MO_1GAIN_12 := __EDTB35 ;
__EDTB36 := __EDTB35 ;
__EDTB37 := (__EDTB34 OR __EDTB36) ;
__EDTB38 := (__EDTB32 OR __EDTB37) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*Linearização SENSOR DE CORRENTE*)
__STEPPRAGMA
0,51
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB39 := TRUE ;
IF __EDTB39 THEN
(* FB call: SCALER *)
SCALER_3(RSENSORCORRENTE, RMINIMO_AI2, RMAXIMO_AI2, MIN_SENSORCORRENTE, MAX_SENSORCORRENTE) ;
RCONV_SENSORCORRENTE := SCALER_3.Output ;
END_IF ;
__MO_SCALER_3 := __EDTB39 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CELULA DE CARGA*)
__STEPPRAGMA
0,58
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB40 := TRUE ;
IF __EDTB40 THEN
RCELULACARGA := ANY_TO_REAL(_IO_P1_AI_03) ;
END_IF ;
__MO_ANY_TO_REAL_4 := __EDTB40 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*Linearização CELULA DE CARGA*)
__STEPPRAGMA
0,61
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB41 := TRUE ;
IF __EDTB41 THEN
(* FB call: SCALER *)
SCALER_6(RCELULACARGA, RMINIMO_AI3, RMAXIMO_AI3, MIN_CELULACARGA, MAX_CELULACARGA) ;
RCONV_CELULACARGA := SCALER_6.Output ;
END_IF ;
__MO_SCALER_4 := __EDTB41 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)

