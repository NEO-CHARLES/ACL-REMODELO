(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := TRUE ;
IF __EDTB1 THEN
OP20_ACL_INPUT.CHANNEL := (  OP20_CHANNEL) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
OP20_ARL_INPUT.CHANNEL := (  OP20_ACL_INPUT.CHANNEL) ;
END_IF ;
__MO_1GAIN_2 := __EDTB2 ;
__EDTB3 := __EDTB2 ;
__EDTB4 := TRUE ;
IF __EDTB4 THEN
OP30_ACL_INPUT.CHANNEL := (  OP30_CHANNEL) ;
END_IF ;
__MO_1GAIN_3 := __EDTB4 ;
__EDTB5 := __EDTB4 ;
IF __EDTB5 THEN
OP30_ARL_INPUT.CHANNEL := (  OP30_ACL_INPUT.CHANNEL) ;
END_IF ;
__MO_1GAIN_4 := __EDTB5 ;
__EDTB6 := __EDTB5 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,6
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB8 := TRUE ;
IF __EDTB8 THEN
(* Operator output on : = with __EDTB7 *)
__EDTB7 := (OP20_PASSO = 0) ;
ELSE
__EDTB7 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB7 ;
(* FB call: ACL *)
ACL_2(__EDTB7, OP20_ACL_INPUT) ;
(* FB call: TON *)
TON_4(ACL_2.Q, T#500MS) ;
__EDTB9 := TON_4.Q ;
IF __EDTB9 THEN
OP20_PASSO := (  1) ;
END_IF ;
__MO_1GAIN_5 := __EDTB9 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,10
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB11 := TRUE ;
IF __EDTB11 THEN
(* Operator output on : = with __EDTB10 *)
__EDTB10 := (OP20_PASSO = 1) ;
ELSE
__EDTB10 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB10 ;
(* FB call: ARL *)
ARL_1(__EDTB10, OP20_ARL_INPUT) ;
OP20_ARL_DEST := ARL_1.Destination ;
__EDTB12 := ARL_1.Q ;
(* FB call: TON *)
TON_2(__EDTB12, T#200MS) ;
__EDTB13 := TON_2.Q ;
IF __EDTB13 THEN
OP20_PASSO := (  0) ;
END_IF ;
__MO_1GAIN_6 := __EDTB13 ;
__EDTB14 := __EDTB13 ;
__EDTB15 := __EDTB12 ;
IF __EDTB15 THEN
OP20_ARL_TAMANHO := ANY_TO_DINT(OP20_ARL_INPUT.LENGTH) ;
END_IF ;
__MO_ANY_TO_DINT_1 := __EDTB15 ;
(* FB call: RA_ASCII_INPUT_TO_STRING *)
RA_ASCII_INPUT_TO_STRING_2(__EDTB15, OP20_ARL_DEST, OP20_ARL_TAMANHO) ;
OP20_STR_OUT := RA_ASCII_INPUT_TO_STRING_2.Output ;
OP20_TORK := RA_ASCII_INPUT_TO_STRING_2.Tork ;
__EDTB16 := RA_ASCII_INPUT_TO_STRING_2.FBENO ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,16
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB18 := TRUE ;
IF __EDTB18 THEN
(* Operator output on : = with __EDTB17 *)
__EDTB17 := (OP30_PASSOS = 0) ;
ELSE
__EDTB17 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB17 ;
(* FB call: ACL *)
ACL_1(__EDTB17, OP30_ACL_INPUT) ;
(* FB call: TON *)
TON_3(ACL_1.Q, T#500MS) ;
__EDTB19 := TON_3.Q ;
IF __EDTB19 THEN
OP30_PASSOS := (  1) ;
END_IF ;
__MO_1GAIN_7 := __EDTB19 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,20
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB21 := TRUE ;
IF __EDTB21 THEN
(* Operator output on : = with __EDTB20 *)
__EDTB20 := (OP30_PASSOS = 1) ;
ELSE
__EDTB20 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB20 ;
(* FB call: ARL *)
ARL_2(__EDTB20, OP30_ARL_INPUT) ;
OP30_ARL_DEST := ARL_2.Destination ;
__EDTB22 := ARL_2.Q ;
(* FB call: TON *)
TON_1(__EDTB22, T#200MS) ;
__EDTB23 := TON_1.Q ;
IF __EDTB23 THEN
OP30_PASSOS := (  0) ;
END_IF ;
__MO_1GAIN_8 := __EDTB23 ;
__EDTB24 := __EDTB23 ;
__EDTB25 := __EDTB22 ;
IF __EDTB25 THEN
OP30_ARL_TAMANHO := ANY_TO_DINT(OP30_ARL_INPUT.LENGTH) ;
END_IF ;
__MO_ANY_TO_DINT_2 := __EDTB25 ;
(* FB call: RA_ASCII_INPUT_TO_STRING *)
RA_ASCII_INPUT_TO_STRING_1(__EDTB25, OP30_ARL_DEST, OP30_ARL_TAMANHO) ;
OP30_STR_OUT := RA_ASCII_INPUT_TO_STRING_1.Output ;
OP30_TORK := RA_ASCII_INPUT_TO_STRING_1.Tork ;
__EDTB26 := RA_ASCII_INPUT_TO_STRING_1.FBENO ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,26
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : RA_ASCII_INPUT_TO_STRING_2.FBENO with __MEMO__1__RA_ASCII_INPUT_TO_STRING_2_FBENO *)
__EDTB27 := (RA_ASCII_INPUT_TO_STRING_2.FBENO AND NOT(__MEMO__1__RA_ASCII_INPUT_TO_STRING_2_FBENO)) ;
__EDTB29 := __EDTB27 ;
IF __EDTB29 THEN
(* Operator output on : < with __EDTB28 *)
__EDTB28 := (NOP20_HISTORIC < 7) ;
ELSE
__EDTB28 := FALSE ;
END_IF ;
__MO_LESS_1 := __EDTB28 ;
__EDTB30 := __EDTB28 ;
IF __EDTB30 THEN
NOP20_HISTORIC := (1 + NOP20_HISTORIC) ;
END_IF ;
__MO_PLUS_1 := __EDTB30 ;
__EDTB31 := __EDTB30 ;
__EDTB33 := __EDTB27 ;
IF __EDTB33 THEN
(* Operator output on : >= with __EDTB32 *)
__EDTB32 := (NOP20_HISTORIC >= 7) ;
ELSE
__EDTB32 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB32 ;
__EDTB34 := __EDTB32 ;
IF __EDTB34 THEN
NOP20_HISTORIC := (  0) ;
END_IF ;
__MO_1GAIN_9 := __EDTB34 ;
__EDTB35 := __EDTB34 ;
(* FB call: HISTORICO *)
HISTORICO_1((__EDTB31 OR __EDTB35), OP20_TORK, NOP20_HISTORIC) ;
VET_OP20_TORK := HISTORICO_1.VET ;

(*************** Code for the end of Rung **************)
__MEMO__1__RA_ASCII_INPUT_TO_STRING_2_FBENO := RA_ASCII_INPUT_TO_STRING_2.FBENO ; (*Pulse detection on : RA_ASCII_INPUT_TO_STRING_2.FBENO with __MEMO__1__RA_ASCII_INPUT_TO_STRING_2_FBENO *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,33
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : RA_ASCII_INPUT_TO_STRING_1.FBENO with __MEMO__2__RA_ASCII_INPUT_TO_STRING_1_FBENO *)
__EDTB36 := (RA_ASCII_INPUT_TO_STRING_1.FBENO AND NOT(__MEMO__2__RA_ASCII_INPUT_TO_STRING_1_FBENO)) ;
__EDTB38 := __EDTB36 ;
IF __EDTB38 THEN
(* Operator output on : < with __EDTB37 *)
__EDTB37 := (NOP30_HISTORIC < 7) ;
ELSE
__EDTB37 := FALSE ;
END_IF ;
__MO_LESS_2 := __EDTB37 ;
__EDTB39 := __EDTB37 ;
IF __EDTB39 THEN
NOP30_HISTORIC := (1 + NOP30_HISTORIC) ;
END_IF ;
__MO_PLUS_2 := __EDTB39 ;
__EDTB40 := __EDTB39 ;
__EDTB42 := __EDTB36 ;
IF __EDTB42 THEN
(* Operator output on : >= with __EDTB41 *)
__EDTB41 := (NOP30_HISTORIC >= 7) ;
ELSE
__EDTB41 := FALSE ;
END_IF ;
__MO_GREATEQUAL_2 := __EDTB41 ;
__EDTB43 := __EDTB41 ;
IF __EDTB43 THEN
NOP30_HISTORIC := (  0) ;
END_IF ;
__MO_1GAIN_10 := __EDTB43 ;
__EDTB44 := __EDTB43 ;
(* FB call: HISTORICO *)
HISTORICO_2((__EDTB40 OR __EDTB44), OP30_TORK, NOP30_HISTORIC) ;
VET_OP30_TORK := HISTORICO_2.VET ;

(*************** Code for the end of Rung **************)
__MEMO__2__RA_ASCII_INPUT_TO_STRING_1_FBENO := RA_ASCII_INPUT_TO_STRING_1.FBENO ; (*Pulse detection on : RA_ASCII_INPUT_TO_STRING_1.FBENO with __MEMO__2__RA_ASCII_INPUT_TO_STRING_1_FBENO *)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __MEMO__1__RA_ASCII_INPUT_TO_STRING_2_FBENO *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __MEMO__2__RA_ASCII_INPUT_TO_STRING_1_FBENO *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)

