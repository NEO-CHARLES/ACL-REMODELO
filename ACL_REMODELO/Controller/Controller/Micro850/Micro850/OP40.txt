(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*VARIÁVEIS Dispositivo Variáveis Local => Global*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := TRUE ;
IF __EDTB1 THEN
OP40_STP := (  STP) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
OP40_SV := (  SALVAR) ;
END_IF ;
__MO_1GAIN_2 := __EDTB2 ;
OP40_LD_VM := __EDTB2 AND VM ;
OP40_LD_AM := __EDTB2 AND AM ;
OP40_LD_VD := __EDTB2 AND VD ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*VARIÁVEIS Dispositivo Variáveis Global => Local*)
__STEPPRAGMA
0,5
__ENDSTEPPRAGMA
(*Label :*)(**)
BME := OP40_BME ;
BMD := OP40_BMD ;
BTS := OP40_BTS ;
__EDTB3 := OP40_BMD ;
__EDTB4 := IHM_AL_RS ;
AL_RS := (__EDTB3 OR __EDTB4) ;
__EDTB5 := OP40_DP_LB AND NOT(SV) ;
__EDTB6 := IHM_DP_LB ;
DP_LB := (__EDTB5 OR __EDTB6) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*VARIÁVEIS Contador*)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB7 := TRUE ;
IF __EDTB7 THEN
PD_AV := ANY_TO_DINT(IHM_PD_AV) ;
END_IF ;
__MO_ANY_TO_DINT_1 := __EDTB7 ;
__EDTB8 := __EDTB7 ;
IF __EDTB8 THEN
OP40_PD_AT := ANY_TO_INT(PD_AT) ;
END_IF ;
__MO_ANY_TO_INT_1 := __EDTB8 ;
__EDTB9 := __EDTB8 AND OP40_PD_UP ;
__EDTB10 := __EDTB8 AND CC_AP ;
PD_UP := (__EDTB9 OR __EDTB10) ;
__EDTB11 := __EDTB8 AND OP40_PD_RS ;
__EDTB12 := __EDTB8 AND IHM_PD_RS ;
PD_RS := (__EDTB11 OR __EDTB12) ;
PD_DW := __EDTB8 AND OP40_PD_DW ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*VARIÁVEIS Celula de carga CC1*)
__STEPPRAGMA
0,19
__ENDSTEPPRAGMA
(*Label :*)(**)
OP40_CC1_TT := CC_TT ;
__EDTB13 := DP_RS ;
IF __EDTB13 THEN
(*Reset coil*)
OP40_CC1_AT := FALSE ;
END_IF ;
; (*Pulse detection on : OP40_CC1_RP with __MEMO__1__OP40_CC1_RP *)
__EDTB14 := (OP40_CC1_RP AND NOT(__MEMO__1__OP40_CC1_RP)) ;
IF __EDTB14 THEN
(*Set coil*)
CC_RP := TRUE ;
END_IF ;
; (*Pulse detection on : OP40_CC1_AP with __MEMO__2__OP40_CC1_AP *)
__EDTB15 := (OP40_CC1_AP AND NOT(__MEMO__2__OP40_CC1_AP)) ;
IF __EDTB15 THEN
(*Set coil*)
CC_AP := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__MEMO__1__OP40_CC1_RP := OP40_CC1_RP ; (*Pulse detection on : OP40_CC1_RP with __MEMO__1__OP40_CC1_RP *)
__MEMO__2__OP40_CC1_AP := OP40_CC1_AP ; (*Pulse detection on : OP40_CC1_AP with __MEMO__2__OP40_CC1_AP *)


(*************** Rung **********************************)
(*CONTROLE Segurança*)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB16 := NOT(BTS) ;
IF __EDTB16 THEN
(*Set coil*)
AL00 := TRUE ;
END_IF ;
(* FB call: FB_BM *)
FB_BM_1(BME, BMD) ;
BTL := FB_BM_1.Q ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE Sinalizador LED*)
__STEPPRAGMA
0,28
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: FB_SNL *)
FB_SNL_1(TRUE, STP) ;
AM := FB_SNL_1.YL ;
VD := FB_SNL_1.GR ;
VM := FB_SNL_1.RD ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTORLE DE Setup*)
__STEPPRAGMA
0,32
__ENDSTEPPRAGMA
(*Label :*)(**)
SU := TRUE ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE DE Histórico*)
__STEPPRAGMA
0,34
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: FB_SV *)
FB_SV_1(SV, T#1S) ;
SALVAR := FB_SV_1.TG ;
__EDTB17 := FB_SV_1.Q ;
IF __EDTB17 THEN
(*Reset coil*)
SV := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE DE Alertas *)
__STEPPRAGMA
0,37
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB18 := AL00 ;
IF __EDTB18 THEN
ALARME := ANY_TO_INT(40000) ;
END_IF ;
__MO_ANY_TO_INT_2 := __EDTB18 ;
__EDTB19 := __EDTB18 ;
IF __EDTB19 THEN
STP := ANY_TO_INT(501) ;
END_IF ;
__MO_ANY_TO_INT_3 := __EDTB19 ;
__EDTB20 := __EDTB19 ;
IF __EDTB20 THEN
(*Reset coil*)
AL00 := FALSE ;
END_IF ;
__EDTB21 := AL20 ;
IF __EDTB21 THEN
ALARME := ANY_TO_INT(4020) ;
END_IF ;
__MO_ANY_TO_INT_4 := __EDTB21 ;
__EDTB22 := __EDTB21 ;
IF __EDTB22 THEN
STP := ANY_TO_INT(500) ;
END_IF ;
__MO_ANY_TO_INT_5 := __EDTB22 ;
__EDTB23 := __EDTB22 ;
IF __EDTB23 THEN
(*Reset coil*)
AL20 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*CONTROLE de produção*)
__STEPPRAGMA
0,42
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: CTUD *)
CTUD_1(PD_UP, PD_DW, PD_RS, , PD_AV) ;
PD_AT := CTUD_1.CV ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 00 - RESET*)
__STEPPRAGMA
0,48
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB25 := TRUE ;
IF __EDTB25 THEN
(* Operator output on : = with __EDTB24 *)
__EDTB24 := (STP = 0) ;
ELSE
__EDTB24 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB24 ;
(* FB call: TP *)
TP_1(__EDTB24, T#2S) ;
DP_RS := TP_1.Q ;
(* FB call: TON *)
TON_3(__EDTB24, T#1S) ;
__EDTB26 := TON_3.Q AND DP_LB ;
IF __EDTB26 THEN
STP := (  1) ;
END_IF ;
__MO_1GAIN_3 := __EDTB26 ;
__EDTB27 := __EDTB26 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 01 - SETUP NOK*)
__STEPPRAGMA
0,53
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB29 := TRUE ;
IF __EDTB29 THEN
(* Operator output on : = with __EDTB28 *)
__EDTB28 := (STP = 1) ;
ELSE
__EDTB28 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB28 ;
__EDTB30 := __EDTB28 AND SU ;
IF __EDTB30 THEN
STP := (  10) ;
END_IF ;
__MO_1GAIN_4 := __EDTB30 ;
__EDTB31 := __EDTB30 ;
; (*Fall detection on  : BTL with __MEMO__3__BTL *)
__EDTB32 := __EDTB28 AND (__MEMO__3__BTL AND NOT(BTL)) ;
IF __EDTB32 THEN
(*Set coil*)
AL20 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)
__MEMO__3__BTL := BTL ; (*Fall detection on  : BTL with __MEMO__3__BTL *)


(*************** Rung **********************************)
(*PASSO 10 - STUP OK*)
__STEPPRAGMA
0,57
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB34 := TRUE ;
IF __EDTB34 THEN
(* Operator output on : = with __EDTB33 *)
__EDTB33 := (STP = 10) ;
ELSE
__EDTB33 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB33 ;
; (*Fall detection on  : BTL with __MEMO__4__BTL *)
__EDTB35 := __EDTB33 AND (__MEMO__4__BTL AND NOT(BTL)) ;
IF __EDTB35 THEN
STP := (  20) ;
END_IF ;
__MO_1GAIN_5 := __EDTB35 ;
__EDTB36 := __EDTB35 ;
__EDTB37 := __EDTB33 AND NOT(SU) ;
IF __EDTB37 THEN
STP := (  1) ;
END_IF ;
__MO_1GAIN_6 := __EDTB37 ;
__EDTB38 := __EDTB37 ;

(*************** Code for the end of Rung **************)
__MEMO__4__BTL := BTL ; (*Fall detection on  : BTL with __MEMO__4__BTL *)


(*************** Rung **********************************)
(*PASSO 20 - INICIO*)
__STEPPRAGMA
0,62
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB40 := TRUE ;
IF __EDTB40 THEN
(* Operator output on : = with __EDTB39 *)
__EDTB39 := (STP = 20) ;
ELSE
__EDTB39 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB39 ;
__EDTB41 := __EDTB39 ;
IF __EDTB41 THEN
(*Reset coil*)
CC_AP := FALSE ;
END_IF ;
__EDTB42 := __EDTB39 ;
IF __EDTB42 THEN
(*Reset coil*)
CC_RP := FALSE ;
END_IF ;
__EDTB43 := __EDTB39 AND NOT(CC_AP) AND NOT(CC_RP) ;
IF __EDTB43 THEN
STP := (  30) ;
END_IF ;
__MO_1GAIN_7 := __EDTB43 ;
__EDTB44 := __EDTB43 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,67
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB46 := TRUE ;
IF __EDTB46 THEN
(* Operator output on : = with __EDTB45 *)
__EDTB45 := (STP = 30) ;
ELSE
__EDTB45 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB45 ;
CC_TT := __EDTB45 ;
__EDTB47 := __EDTB45 AND CC_TT ;
IF __EDTB47 THEN
STP := (  300) ;
END_IF ;
__MO_1GAIN_8 := __EDTB47 ;
__EDTB48 := __EDTB47 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 300 - TESTE*)
__STEPPRAGMA
0,71
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB50 := TRUE ;
IF __EDTB50 THEN
(* Operator output on : = with __EDTB49 *)
__EDTB49 := (STP = 300) ;
ELSE
__EDTB49 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB49 ;
(* FB call: TON *)
TON_1(__EDTB49, T#5S) ;
__EDTB51 := TON_1.Q ;
IF __EDTB51 THEN
(*Set coil*)
CC_RP := TRUE ;
END_IF ;
__EDTB52 := __EDTB49 AND CC_AP ;
IF __EDTB52 THEN
ALARME := (  4010) ;
END_IF ;
__MO_1GAIN_9 := __EDTB52 ;
__EDTB53 := __EDTB52 ;
__EDTB54 := __EDTB49 AND CC_RP ;
IF __EDTB54 THEN
ALARME := (  4011) ;
END_IF ;
__MO_1GAIN_10 := __EDTB54 ;
__EDTB55 := __EDTB54 ;
__EDTB56 := (__EDTB53 OR __EDTB55) ;
IF __EDTB56 THEN
STP := (  400) ;
END_IF ;
__MO_1GAIN_11 := __EDTB56 ;
__EDTB57 := __EDTB56 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 400 - SALVA HISTÓRICO*)
__STEPPRAGMA
0,78
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB59 := TRUE ;
IF __EDTB59 THEN
(* Operator output on : = with __EDTB58 *)
__EDTB58 := (STP = 400) ;
ELSE
__EDTB58 := FALSE ;
END_IF ;
__MO_EQUAL_7 := __EDTB58 ;
__EDTB60 := __EDTB58 ;
IF __EDTB60 THEN
(*Set coil*)
SV := TRUE ;
END_IF ;
__EDTB61 := __EDTB58 AND SV ;
__EDTB62 := __EDTB61 AND CC_AP ;
IF __EDTB62 THEN
STP := (  0) ;
END_IF ;
__MO_1GAIN_12 := __EDTB62 ;
__EDTB63 := __EDTB62 ;
__EDTB64 := __EDTB61 AND CC_RP ;
IF __EDTB64 THEN
STP := (  500) ;
END_IF ;
__MO_1GAIN_13 := __EDTB64 ;
__EDTB65 := __EDTB64 ;
__EDTB66 := (__EDTB63 OR __EDTB65) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*PASSO 500 - RESET DE FALHAS*)
__STEPPRAGMA
0,84
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB68 := TRUE ;
IF __EDTB68 THEN
(* Operator output on : = with __EDTB67 *)
__EDTB67 := (STP = 500) ;
ELSE
__EDTB67 := FALSE ;
END_IF ;
__MO_EQUAL_8 := __EDTB67 ;
; (*Fall detection on  : AL_RS with __MEMO__5__AL_RS *)
__EDTB69 := __EDTB67 AND (__MEMO__5__AL_RS AND NOT(AL_RS)) ;
IF __EDTB69 THEN
ALARME := (  0) ;
END_IF ;
__MO_1GAIN_14 := __EDTB69 ;
__EDTB70 := __EDTB69 ;
IF __EDTB70 THEN
(*Set coil*)
VVS := TRUE ;
END_IF ;
__EDTB71 := __EDTB69 AND VVS ;
IF __EDTB71 THEN
STP := (  0) ;
END_IF ;
__MO_1GAIN_15 := __EDTB71 ;
__EDTB72 := __EDTB71 ;

(*************** Code for the end of Rung **************)
__MEMO__5__AL_RS := AL_RS ; (*Fall detection on  : AL_RS with __MEMO__5__AL_RS *)


(*************** Rung **********************************)
(*PASSO 501 - SEGURANÇA*)
__STEPPRAGMA
0,88
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB74 := TRUE ;
IF __EDTB74 THEN
(* Operator output on : = with __EDTB73 *)
__EDTB73 := (STP = 501) ;
ELSE
__EDTB73 := FALSE ;
END_IF ;
__MO_EQUAL_9 := __EDTB73 ;
__EDTB75 := __EDTB73 ;
IF __EDTB75 THEN
(*Reset coil*)
VVS := FALSE ;
END_IF ;
__EDTB76 := __EDTB73 AND NOT(VVS) AND BTS ;
IF __EDTB76 THEN
STP := (  500) ;
END_IF ;
__MO_1GAIN_16 := __EDTB76 ;
__EDTB77 := __EDTB76 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __MEMO__1__OP40_CC1_RP *)
(* __EDTB14 *)
(* __MEMO__2__OP40_CC1_AP *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __MEMO__3__BTL *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __MEMO__4__BTL *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __EDTB52 *)
(* __EDTB53 *)
(* __EDTB54 *)
(* __EDTB55 *)
(* __EDTB56 *)
(* __EDTB57 *)
(* __EDTB58 *)
(* __EDTB59 *)
(* __EDTB60 *)
(* __EDTB61 *)
(* __EDTB62 *)
(* __EDTB63 *)
(* __EDTB64 *)
(* __EDTB65 *)
(* __EDTB66 *)
(* __EDTB67 *)
(* __EDTB68 *)
(* __MEMO__5__AL_RS *)
(* __EDTB69 *)
(* __EDTB70 *)
(* __EDTB71 *)
(* __EDTB72 *)
(* __EDTB73 *)
(* __EDTB74 *)
(* __EDTB75 *)
(* __EDTB76 *)
(* __EDTB77 *)

