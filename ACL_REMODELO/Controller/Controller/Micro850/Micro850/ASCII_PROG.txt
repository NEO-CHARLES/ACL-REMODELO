(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(*Contabiliza o número de caracteres ASCII no buffer de entrada até e incluindo o caractere de terminação do final da linha. Linguagens suportadas: Diagrama do bloco da função, Diagrama da lógica de contatos, Texto estruturado.
Essa instrução se*)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: ABL *)
ABL_1(ABL1_GATILHO, ABL1_ENTRADA) ;
NABL1_CARACTERES := ABL_1.Characters ;
BABL1_ERRO := ABL_1.Error ;
NABL1_ERRO_ID := ABL_1.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(*The ACL instruction immediately performs one or both of the following actions: Clears the buffer of characters and clears the ASCII queue of read instructions
Clears the ASCII queue of write instructions*)
__STEPPRAGMA
0,6
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: ACL *)
ACL_1(ACL1_GATILHO, ACL1_ENTRADA) ;
BACL_ERROR := ACL_1.Error ;
NACL_ERROR_ID := ACL_1.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,10
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_15(AWT_GAT_00, AWT_ENTRADA_0, STR_00_INICIO, 0) ;
NAWT_CARACTERES := AWT_15.NumChar ;
BAWT_ERROR := AWT_15.Error ;
NAWT_ERROR_ID := AWT_15.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,15
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := AWT_GAT_01 ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
(* Operator output on : = with __EDTB2 *)
__EDTB2 := (IHM_MD = 1) ;
ELSE
__EDTB2 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB2 ;
(* FB call: AWT *)
AWT_21(__EDTB2, AWT_ENTRADA_1, STR_01_B3, 0) ;
NAWT_CARAC_B1 := AWT_21.NumChar ;
BAWT_ERROR := AWT_21.Error ;
NAWT_ERROR_ID := AWT_21.ErrorID ;
__EDTB4 := AWT_21.Q ;
__EDTB6 := __EDTB1 ;
IF __EDTB6 THEN
(* Operator output on : = with __EDTB5 *)
__EDTB5 := (IHM_MD = 2) ;
ELSE
__EDTB5 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB5 ;
(* FB call: AWT *)
AWT_22(__EDTB5, AWT_ENTRADA_1, STR_01_B4, 0) ;
NAWT_CARACTERES := AWT_22.NumChar ;
BAWT_ERROR := AWT_22.Error ;
NAWT_ERROR_ID := AWT_22.ErrorID ;
__EDTB7 := AWT_22.Q ;
__EDTB9 := __EDTB1 ;
IF __EDTB9 THEN
(* Operator output on : = with __EDTB8 *)
__EDTB8 := (IHM_MD = 7) ;
ELSE
__EDTB8 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB8 ;
(* FB call: AWT *)
AWT_18(__EDTB8, AWT_ENTRADA_1, STR_01_B1, 0) ;
NAWT_CARACTERES := AWT_18.NumChar ;
BAWT_ERROR := AWT_18.Error ;
NAWT_ERROR_ID := AWT_18.ErrorID ;
__EDTB10 := AWT_18.Q ;
__EDTB11 := (__EDTB7 OR __EDTB10) ;
__EDTB13 := __EDTB1 ;
IF __EDTB13 THEN
(* Operator output on : = with __EDTB12 *)
__EDTB12 := (IHM_MD = 8) ;
ELSE
__EDTB12 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB12 ;
(* FB call: AWT *)
AWT_20(__EDTB12, AWT_ENTRADA_1, STR_01_B2, 0) ;
NAWT_CARACTERES := AWT_20.NumChar ;
BAWT_ERROR := AWT_20.Error ;
NAWT_ERROR_ID := AWT_20.ErrorID ;
__EDTB14 := AWT_20.Q ;
__EDTB15 := (__EDTB11 OR __EDTB14) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,32
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_13(AWT_GAT_02, AWT_ENTRADA_2, STR_02_DATA, 0) ;
NAWT_CARACTERES := AWT_13.NumChar ;
BAWT_ERROR := AWT_13.Error ;
NAWT_ERROR_ID := AWT_13.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,37
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_12(AWT_GAT_03, AWT_ENTRADA_3, STR_03_HORA, 0) ;
NAWT_CARACTERES := AWT_12.NumChar ;
BAWT_ERROR := AWT_12.Error ;
NAWT_ERROR_ID := AWT_12.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,42
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_11(AWT_GAT_04, AWT_ENTRADA_4, STR_04_OP, 0) ;
NAWT_CARACTERES := AWT_11.NumChar ;
BAWT_ERROR := AWT_11.Error ;
NAWT_ERROR_ID := AWT_11.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,47
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_10(AWT_GAT_05, AWT_ENTRADA_5, STR_05_MANUAL, 0) ;
NAWT_CARACTERES := AWT_10.NumChar ;
BAWT_ERROR := AWT_10.Error ;
NAWT_ERROR_ID := AWT_10.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,52
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_9(AWT_GAT_06, AWT_ENTRADA_6, STR_06_REMOTO, 0) ;
NAWT_CARACTERES := AWT_9.NumChar ;
BAWT_ERROR := AWT_9.Error ;
NAWT_ERROR_ID := AWT_9.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,57
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_8(AWT_GAT_07, AWT_ENTRADA_7, STR_07_PART, 0) ;
NAWT_CARACTERES := AWT_8.NumChar ;
BAWT_ERROR := AWT_8.Error ;
NAWT_ERROR_ID := AWT_8.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,62
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_7(AWT_GAT_08, AWT_ENTRADA_8, STR_08_PART_NUM1, 0) ;
NAWT_CARACTERES := AWT_7.NumChar ;
BAWT_ERROR := AWT_7.Error ;
NAWT_ERROR_ID := AWT_7.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,67
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_6(ABILITAR AND AWT_GAT_04, AWT_ENTRADA_9, STR_09_PART_NUM2, 0) ;
NAWT_CARACTERES := AWT_6.NumChar ;
BAWT_ERROR := AWT_6.Error ;
NAWT_ERROR_ID := AWT_6.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,72
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_5(AWT_GAT_10, AWT_ENTRADA_10, STR_10_PART_NUM3, 0) ;
NAWT_CARACTERES := AWT_5.NumChar ;
BAWT_ERROR := AWT_5.Error ;
NAWT_ERROR_ID := AWT_5.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,77
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_4(ABILITAR AND AWT_GAT_11, AWT_ENTRADA_11, STR_11_PART_NUM4, 0) ;
NAWT_CARACTERES := AWT_4.NumChar ;
BAWT_ERROR := AWT_4.Error ;
NAWT_ERROR_ID := AWT_4.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,82
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_3(ABILITAR AND AWT_GAT_12, AWT_ENTRADA_12, STR_12_PART_NUM5, 0) ;
NAWT_CARACTERES := AWT_3.NumChar ;
BAWT_ERROR := AWT_3.Error ;
NAWT_ERROR_ID := AWT_3.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,87
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_2(ABILITAR AND AWT_GAT_13, AWT_ENTRADA_13, STR_13_PART_NUM6, 0) ;
NAWT_CARACTERES := AWT_2.NumChar ;
BAWT_ERROR := AWT_2.Error ;
NAWT_ERROR_ID := AWT_2.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,92
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB16 := AWT_GAT_14 ;
(* FB call: AWT *)
AWT_16(__EDTB16 AND MD_LE, AWT_ENTRADA_14, STR_14_MOD_E, 0) ;
NAWT_CARACTERES := AWT_16.NumChar ;
BAWT_ERROR := AWT_16.Error ;
NAWT_ERROR_ID := AWT_16.ErrorID ;
__EDTB17 := AWT_16.Q ;
(* FB call: AWT *)
AWT_23(__EDTB16 AND MD_LD, AWT_ENTRADA_14, STR_14_MOD_D, 0) ;
NAWT_CARACTERES := AWT_23.NumChar ;
BAWT_ERROR := AWT_23.Error ;
NAWT_ERROR_ID := AWT_23.ErrorID ;
__EDTB18 := AWT_23.Q ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,101
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: AWT *)
AWT_1(AWT_GAT_15, AWT_ENTRADA_15, STR_15_FIM, 0) ;
NAWT_CARACTERES := AWT_1.NumChar ;
BAWT_ERROR := AWT_1.Error ;
NAWT_ERROR_ID := AWT_1.ErrorID ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)

